<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bienvenue à Pratik ! on</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/</link><description>Recent content in bienvenue à Pratik ! on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://pratik-tn-693c7eaaabe6.herokuapp.com/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Installer Thonny</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson1/</guid><description>Vidéo#Description#Lien téléchargement Thonny</description></item><item><title>2. Les Types de Données (nombres et booléan)</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson2/</guid><description>Vidéo#Exemples#Addition (Addition)## Addition a = 5 b = 3 result = a + b print(result) # Output: 8 Subtraction (Soustraction)## Subtraction a = 10 b = 7 result = a - b print(result) # Output: 3 Multiplication (Multiplication)## Multiplication a = 4 b = 6 result = a * b print(result) # Output: 24 Division (Division)## Division a = 10 b = 2 result = a / b print(result) # Output: 5.</description></item><item><title>3. Chaine De Caractère</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson3/</guid><description>Vidéo#Description#Voici les opérations courantes sur les chaînes de caractères en Python, avec des exemples :
Déclaration de chaîne de caractères :#Une chaîne de caractères peut être déclarée en utilisant des guillemets simples (&amp;rsquo; &amp;lsquo;), des guillemets doubles (&amp;quot; &amp;ldquo;), ou même des triples guillemets (&amp;rsquo;&amp;rsquo;&amp;rsquo; &amp;rsquo;&amp;rsquo;&amp;rsquo; ou &amp;quot;&amp;rdquo;&amp;quot; &amp;ldquo;&amp;rdquo;&amp;quot;) pour les chaînes multilignes.
Exemples :
# Utilisation de guillemets simples chaine_simple = &amp;#39;Bonjour&amp;#39; # Utilisation de guillemets doubles chaine_double = &amp;#34;Python&amp;#34; # Utilisation de triples guillemets pour une chaîne multiligne chaine_multiligne = &amp;#39;&amp;#39;&amp;#39;Ceci est une chaîne multiligne&amp;#39;&amp;#39;&amp;#39; print(chaine_simple) print(chaine_double) print(chaine_multiligne) Indexation de chaîne de caractères :#Les caractères d&amp;rsquo;une chaîne de caractères peuvent être accédés en utilisant l&amp;rsquo;index de chaque caractère.</description></item><item><title>4. Variables</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson4/</guid><description>Vidéo#Description#Voici des exemples des opérations de base sur les variables en Python :
Déclaration de variables :#En Python, les variables peuvent être déclarées en leur attribuant une valeur à l&amp;rsquo;aide de l&amp;rsquo;opérateur d&amp;rsquo;assignation (=).
Exemples :
# Déclaration d&amp;#39;une variable numérique nombre = 10 # Déclaration d&amp;#39;une variable de chaîne de caractères message = &amp;#34;Bonjour&amp;#34; # Déclaration d&amp;#39;une variable booléenne est_vrai = True print(nombre) print(message) print(est_vrai) Incrémentation de variables (numériques) :#Pour augmenter la valeur d&amp;rsquo;une variable numérique, on peut utiliser l&amp;rsquo;opérateur d&amp;rsquo;addition (+=) ou l&amp;rsquo;opérateur d&amp;rsquo;incrémentation (+=).</description></item><item><title>5. Les entrées d'utilisatuer</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson5/</guid><description>Vidéo#Description#Voici comment utiliser la fonction input() en Python pour obtenir des entrées utilisateur :
Obtention des entrées utilisateur avec input() :#La fonction input() est utilisée pour obtenir une entrée utilisateur à partir de la ligne de commande. Elle renvoie toujours une chaîne de caractères (string), même si l&amp;rsquo;utilisateur entre un nombre ou un autre type de données.
Exemple :
# Demander à l&amp;#39;utilisateur son nom nom_utilisateur = input(&amp;#34;Entrez votre nom : &amp;#34;) # Demander à l&amp;#39;utilisateur son âge age_utilisateur = input(&amp;#34;Entrez votre âge : &amp;#34;) # La valeur renvoyée par input() est toujours une chaîne de caractères # Donc, même si l&amp;#39;utilisateur entre un nombre, il sera traité comme une chaîne print(&amp;#34;Bonjour &amp;#34; + nom_utilisateur + &amp;#34;!</description></item><item><title>6. if; elif et else</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson6/</guid><description>Vidéo#Description#Voici comment utiliser les instructions if, elif et else en Python pour contrôler le flux d&amp;rsquo;exécution du programme :
Instructions if, elif et else :#En Python, les instructions if, elif (abréviation de &amp;ldquo;else if&amp;rdquo;) et else sont utilisées pour créer des conditions dans le code. Elles permettent d&amp;rsquo;exécuter certaines parties du code en fonction de la véracité des expressions conditionnelles.
Exemple :
# Demander à l&amp;#39;utilisateur son âge age_utilisateur = int(input(&amp;#34;Entrez votre âge : &amp;#34;)) # Vérifier si l&amp;#39;utilisateur est majeur if age_utilisateur &amp;gt;= 18: print(&amp;#34;Vous êtes majeur.</description></item><item><title>7. Random et Valeur Aléatoire</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson7/</guid><description>Vidéo#Description#Voici comment utiliser la fonction randint() en Python pour générer des nombres entiers aléatoires, ainsi qu&amp;rsquo;un exemple pour générer un nombre flottant avec cette fonction :
Utilisation de la fonction randint() pour les nombres entiers :#La fonction randint(a, b) du module random est utilisée pour générer un nombre entier aléatoire compris entre a et b, inclusivement.
Exemple :
from random import randint # Générer un nombre entier aléatoire entre 1 et 100 nombre_entier = randint(1, 100) print(&amp;#34;Nombre aléatoire entre 1 et 100 :&amp;#34;, nombre_entier) Génération d&amp;rsquo;un nombre flottant avec la fonction randint() :#Pour générer un nombre flottant avec la fonction randint(), vous pouvez multiplier le résultat par un nombre flottant et arrondir le résultat au nombre de décimales souhaité.</description></item><item><title>8. les boucles While et For</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson8/</guid><description>Vidéo#Description#Voici comment utiliser la fonction range(), les boucles for et les boucles while en Python avec des exemples simples et multiples :
Fonction range() :#La fonction range() est utilisée pour générer une séquence d&amp;rsquo;entiers dans un intervalle donné. Elle est souvent utilisée avec les boucles for.
Exemples :
# Exemple 1 : Utilisation de range pour itérer sur une séquence d&amp;#39;entiers for i in range(5): print(i) # Output: 0 1 2 3 4 # Exemple 2 : Utilisation de range avec un début, une fin et un pas for i in range(1, 10, 2): print(i) # Output: 1 3 5 7 9 Boucles for :#La boucle for est utilisée pour itérer sur une séquence (telle que celle générée par range()) ou une collection (comme une liste ou une chaîne de caractères).</description></item><item><title>9. Contrôle de Saisie</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson9/</guid><description>Vidéo#Description#Voici cinq exemples courants de contrôle de saisie utilisant les boucles while et for en Python :
Utilisation de la boucle while pour le contrôle de saisie :#Vérification de l&amp;rsquo;entrée utilisateur pour un nombre entier positif : entree = -1 while entree &amp;lt; 0: entree = int(input(&amp;#34;Entrez un nombre entier positif : &amp;#34;)) Demande de confirmation de l&amp;rsquo;utilisateur : confirmation = &amp;#34;&amp;#34; while confirmation.</description></item><item><title>10. Chaines (partie 2)</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson10/</guid><description>Vidéo#Description#Voici comment effectuer des manipulations de chaînes de caractères en Python avec des exemples pour les opérations les plus courantes :
Concaténation de chaînes de caractères :#La concaténation de chaînes de caractères consiste à joindre plusieurs chaînes ensemble.
Exemple :
# Exemple 1 : Concaténation de deux chaînes de caractères prenom = &amp;#34;Jean&amp;#34; nom = &amp;#34;Dupont&amp;#34; nom_complet = prenom + &amp;#34; &amp;#34; + nom print(nom_complet) # Output: Jean Dupont # Exemple 2 : Concaténation de plusieurs chaînes de caractères message = &amp;#34;Bonjour &amp;#34; + prenom + &amp;#34;, bienvenue !</description></item><item><title>11. Listes (intro)</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson11/</guid><description>Vidéo#</description></item><item><title>12. Installation Numpy</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson12/</guid><description>Description :#en fonction de vos questions et commentaires ; nous préparerons cette page pour expliquer comment corriger les erreurs courantes lors de l&amp;rsquo;installation de numpy sur votre ordinateur ; attendez-vous à ce que cette page soit mise à jour la semaine prochaine ! merci pour la patience
--></description></item><item><title>13. Manipuler les listes</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson13/</guid><description>Vidéo#Description#Voici comment déclarer un tableau unidimensionnel avec NumPy, remplir le tableau en utilisant une boucle for, imprimer les éléments du tableau à l&amp;rsquo;aide d&amp;rsquo;une autre boucle for, et obtenir une tranche (slice) du tableau :
Déclaration et remplissage d&amp;rsquo;un tableau unidimensionnel avec NumPy :#from numpy import array # Déclaration d&amp;#39;un tableau vide de taille 10 tableau = array([int]*10) # Remplissage du tableau en utilisant une boucle for for i in range(10): tableau[i] = i + 1 # Impression des éléments du tableau en utilisant une boucle for for element in tableau: print(element) ## méthode alternative pour l&amp;#39;impression for i in range(len(tableau)): print(tableau[i]) # Obtenir une tranche (slice) du tableau slice_tableau = tableau[3:7] print(slice_tableau) Dans cet exemple :</description></item><item><title>14. Les Fonctions et les procédures</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson14/</guid><description>Vidéo#Description#Voici comment définir et utiliser des fonctions en Python, en abordant la déclaration de fonction, l&amp;rsquo;appel de fonction, les arguments et l&amp;rsquo;utilisation de la déclaration return :
Définition de fonction :#Pour définir une fonction en Python, utilisez le mot-clé def, suivi du nom de la fonction et de ses paramètres entre parenthèses. Le bloc de code à exécuter est ensuite indenté sous la déclaration de fonction.</description></item><item><title>15. La trie à bulles</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson15/</guid><description>Vidéo#Description#Voici comment implémenter un tri à bulles (bubble sort) en Python, en abordant la définition de la fonction, l&amp;rsquo;appel de la fonction, les arguments et l&amp;rsquo;utilisation de la déclaration return :
Définition de fonction pour le tri à bulles :#Pour définir une fonction qui effectue un tri à bulles en Python, utilisez le mot-clé def, suivi du nom de la fonction et de ses paramètres entre parenthèses.</description></item><item><title>16. QT5 (intro)</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson16/</guid><description>Vidéo#</description></item><item><title>17. QT5 (installation)</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson17/</guid><description>Vidéo#Description#Lien téléchargement Qt Designer</description></item><item><title>18. QT Designer et interface</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson18/</guid><description>Vidéo#Description#pas de description pour le moment; cette page sera mise à jour après avoir reçu votre feedback. Merci !</description></item><item><title>0. Message Important !</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/alert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/alert/</guid><description>Noter Bien :#Notre plateforme est mise à jour quotidiennement ! Nous sommes très désireux de faire de cette plateforme la meilleure jamais créée et nous comptons sur votre soutien constant. Nous vous remercions pour votre patience ! Tous les 3 jours, une nouvelle correction vidéo pour un examen du BAC sera mise en ligne ! Si vous avez des questions, n&amp;rsquo;hésitez pas à nous les poser sur Discord !</description></item><item><title>19. QT5 et Python</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Cours/lesson19/</guid><description>Vidéo#Description#Code Générique (Généralement inclu dans l&amp;rsquo;examen du BAC)#from PyQt5.uic import loadUi from PyQt5.QtWidgets import QApplication app = QApplication([]) ## changer le nom de l&amp;#39;interface ! windows = loadUi (&amp;#34;interface1.ui&amp;#34;) windows.show() ## changer le nom de la fonction ! windows.bouton1.clicked.connect(Bonjour) app.exec_() Code Exemple (inclu dans la vidéo) :#from PyQt5.uic import loadUi from PyQt5.QtWidgets import QApplication def Bonjour (): text = windows.input.text() if len(text) &amp;lt; 3: windows.</description></item><item><title>1. Session 2022 - Nombre Ondulant</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/exam1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/exam1/</guid><description>Examen en PDF#Description :#C&amp;rsquo;est un devoir de bac pratique officiel proposé en 2022, une correction en format vidéo sera publiée dans 10 jours Maximum!
Code de la correction Python :#from PyQt5.QtWidgets import QApplication from PyQt5.uic import loadUi def verif(text): return text.isnumeric() and int(text) &amp;gt; 99 def ondulant(text): n = int(text) for i in range(0, len(text) - 2, 2): if not (text[i] == text[i+2] and text[i] !</description></item><item><title>2. Session 2022 - Nombre Lisse</title><link>https://pratik-tn-693c7eaaabe6.herokuapp.com/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/exam2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pratik-tn-693c7eaaabe6.herokuapp.com/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/exam2/</guid><description>Examen en PDF#Description :#C&amp;rsquo;est un devoir de bac pratique officiel proposé en 2022, une correction en format vidéo sera publiée dans 10 jours Maximum!
Code de la correction Python :#from PyQt5.QtWidgets import QApplication from PyQt5.uic import loadUi from math import sqrt def verif(text): return text.isnumeric() and int(text) &amp;gt; 1 def premier(n): c = 0 for i in range(2, n // 2 + 1): if n % i == 0: c = c + 1 return c == 0 def lisse(n): pgd = 1 for i in range(2, n // 2 + 1): if (n % i == 0 and premier(i)): pgd = i return pgd &amp;lt;= sqrt(n) def Play(): text = fen.</description></item></channel></rss>